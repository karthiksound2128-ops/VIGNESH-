<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Todo – HTML + CSS + JS</title>
  <style>
    :root {
      --bg: #0f172a;
      --card: #111827;
      --muted: #94a3b8;
      --text: #e5e7eb;
      --accent: #22d3ee;
      --danger: #ef4444;
      --ok: #10b981;
      --ring: #22d3ee55;
      --radius: 16px;
    }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial, sans-serif;
      color: var(--text);
      background: radial-gradient(1200px 600px at 10% -10%, #1f2937 0, transparent 70%) no-repeat,
                  radial-gradient(1000px 500px at 120% 10%, #0b3b47 0, transparent 70%) no-repeat,
                  var(--bg);
      display: grid;
      place-items: center;
      padding: 24px;
    }

    .app {
      width: 100%;
      max-width: 720px;
      background: linear-gradient(180deg, #0b1220, #0a0f1a);
      border: 1px solid #1f2937;
      border-radius: var(--radius);
      box-shadow: 0 20px 60px rgba(0,0,0,.45), inset 0 1px 0 rgba(255,255,255,.04);
      overflow: hidden;
    }

    .header {
      padding: 24px 24px 8px;
      border-bottom: 1px solid #1f2937;
      background:
        radial-gradient(600px 120px at 50% 0%, rgba(34,211,238,.08), transparent 70%),
        linear-gradient(180deg, rgba(255,255,255,.04), transparent 40%);
    }
    .title {
      margin: 0 0 6px;
      font-size: clamp(20px, 3.8vw, 28px);
      letter-spacing: .3px;
    }
    .muted { color: var(--muted); font-size: 14px; }

    .row {
      display: grid;
      grid-template-columns: 1fr auto;
      gap: 10px;
      padding: 16px 24px 20px;
      background: linear-gradient(180deg, rgba(255,255,255,.02), transparent);
    }
    .input {
      display: flex; align-items: center; gap: 10px;
      background: #0b1324;
      border: 1px solid #1f2937;
      border-radius: 999px;
      padding: 10px 14px;
      outline: none;
      transition: box-shadow .2s, border-color .2s;
    }
    .input:focus-within {
      box-shadow: 0 0 0 4px var(--ring);
      border-color: #23324a;
    }
    .input input {
      flex: 1;
      background: transparent;
      border: 0;
      outline: none;
      color: var(--text);
      font-size: 15px;
    }
    .btn {
      border: 0;
      padding: 10px 16px;
      border-radius: 999px;
      background: linear-gradient(180deg, #1db6c7, #0ea5b7);
      color: #06242a;
      font-weight: 700;
      letter-spacing: .2px;
      cursor: pointer;
      transition: transform .05s ease, filter .2s ease, box-shadow .2s ease;
      box-shadow: 0 6px 20px rgba(34,211,238,.25);
    }
    .btn:active { transform: translateY(1px) scale(.99); }

    .error {
      color: var(--danger);
      font-size: 13px;
      padding: 0 24px 6px;
      min-height: 18px;
    }

    .lists {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0;
    }
    @media (max-width: 640px) {
      .lists { grid-template-columns: 1fr; }
    }
    .col {
      padding: 16px 24px 24px;
      border-top: 1px solid #101827;
    }
    .col + .col { border-left: 1px solid #101827; }
    @media (max-width: 640px) {
      .col + .col { border-left: none; border-top: 1px solid #101827; }
    }

    .col h2 {
      margin: 0 0 10px;
      font-size: 16px;
      font-weight: 700;
      display: flex; align-items: center; gap: 8px;
    }
    .badge {
      padding: 2px 8px;
      border-radius: 999px;
      font-size: 12px;
      background: #0b1324;
      border: 1px solid #1f2937;
      color: var(--muted);
    }

    .list { display: grid; gap: 8px; }
    .item {
      display: grid;
      grid-template-columns: auto 1fr auto;
      align-items: center;
      gap: 10px;
      padding: 10px 12px;
      background: #0b1324;
      border: 1px solid #1f2937;
      border-radius: 12px;
      transition: border-color .2s, transform .1s ease;
    }
    .item:active { transform: scale(.998); }
    .item input[type="checkbox"] {
      width: 18px; height: 18px;
      accent-color: var(--ok);
      cursor: pointer;
    }
    .item .txt {
      overflow-wrap: anywhere;
    }
    .actions { display: flex; align-items: center; gap: 8px; }
    .icon-btn {
      background: transparent;
      border: 1px solid #1f2937;
      color: var(--muted);
      border-radius: 10px;
      padding: 6px 10px;
      cursor: pointer;
      transition: color .15s, border-color .15s, background .15s;
    }
    .icon-btn:hover { color: var(--text); border-color: #2b3a54; background: #0d172a; }
    .icon-btn.danger:hover { color: #fff; border-color: #3a1b1b; background: #2a0f0f; }
    .sr-only {
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,1,1); white-space: nowrap; border: 0;
    }
    .footer {
      padding: 12px 24px 20px;
      border-top: 1px solid #101827;
      display: flex; justify-content: space-between; align-items: center;
      color: var(--muted);
      font-size: 13px;
    }
    .link {
      color: var(--accent);
      text-decoration: none;
      border-bottom: 1px dashed transparent;
    }
    .link:hover { border-color: var(--accent); }
  </style>
</head>
<body>
  <main class="app" aria-labelledby="app-title">
    <header class="header">
      <h1 id="app-title" class="title">✅ Tiny Todo</h1>
      <p class="muted">Add tasks, mark them done, or undo. No empty tasks allowed.</p>
    </header>

    <section class="row" aria-label="Add a task">
      <label class="input" aria-live="polite">
        <span class="sr-only">Task</span>
        <input id="taskInput" type="text" placeholder="e.g. Finish responsive layout…" autocomplete="off" />
      </label>
      <button id="addBtn" class="btn" type="button" aria-label="Add task">Add</button>
    </section>

    <div id="error" class="error" role="alert" aria-live="polite"></div>

    <section class="lists">
      <div class="col" aria-labelledby="todo-h">
        <h2 id="todo-h">To do <span id="todoCount" class="badge">0</span></h2>
        <div id="todoList" class="list" role="list"></div>
      </div>
      <div class="col" aria-labelledby="done-h">
        <h2 id="done-h">Done <span id="doneCount" class="badge">0</span></h2>
        <div id="doneList" class="list" role="list"></div>
      </div>
    </section>

    <div class="footer">
      <span id="stats">0 total</span>
      <button id="clearDone" class="icon-btn danger" type="button">Clear done</button>
    </div>
  </main>

  <script>
    // --- State & helpers ---
    const $ = (sel) => document.querySelector(sel);
    const createEl = (tag, props = {}) => Object.assign(document.createElement(tag), props);

    const input = $('#taskInput');
    const addBtn = $('#addBtn');
    const err = $('#error');
    const todoList = $('#todoList');
    const doneList = $('#doneList');
    const todoCount = $('#todoCount');
    const doneCount = $('#doneCount');
    const stats = $('#stats');
    const clearDoneBtn = $('#clearDone');

    const STORAGE_KEY = 'tiny_todo_v1';

    let tasks = load();

    function load() {
      try {
        const raw = localStorage.getItem(STORAGE_KEY);
        return raw ? JSON.parse(raw) : [];
      } catch {
        return [];
      }
    }
    function save() {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(tasks));
    }

    function uid() {
      return Math.random().toString(36).slice(2, 9);
    }

    // --- Rendering ---
    function render() {
      todoList.innerHTML = '';
      doneList.innerHTML = '';
      let t = 0, d = 0;

      tasks.forEach(task => {
        const li = createEl('div', { className: 'item', role: 'listitem' });

        const checkbox = createEl('input', { type: 'checkbox', checked: task.done, 'aria-label': 'Toggle done' });
        checkbox.addEventListener('change', () => toggle(task.id));

        const text = createEl('div', { className: 'txt', textContent: task.text });

        const actions = createEl('div', { className: 'actions' });

        const delBtn = createEl('button', { className: 'icon-btn danger', type: 'button', title: 'Delete' });
        delBtn.textContent = 'Delete';
        delBtn.addEventListener('click', () => remove(task.id));

        const moveBtn = createEl('button', { className: 'icon-btn', type: 'button', title: 'Move to other list' });
        moveBtn
